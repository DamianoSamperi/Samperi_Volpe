version: '1'

services:
  controller_tratta:
    build:     
      context: ../Services/Controller_tratta
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    volumes:
      - daticontrollertratte:/Services/Controller_tratta/controllertratte

  elaboratore:
    build:     
      context: ../Services/Elaboratore
      dockerfile: Dockerfile  
    depends_on:
      - kafka  
    ports: 
      - 5010:5010

  notifier:
    build:    
      context: ../Services/Notification
      dockerfile: Dockerfile
    ports:
      - "5003:5003"

  rules:
    build:     
      context: ../Services/Rules_Database
      dockerfile: Dockerfile
    ports:
      - "5005:5005"
    volumes:
      - datirules:/Services/Rules_Database/rules

  scraper:
    depends_on:
      - controller_tratta
      - kafka
      - elaboratore
    build:     
      context: ../Services/Scraper
      dockerfile: Dockerfile
    ports: 
     - 5012:5012

  user_controller:
    build:     
      context: ../Services/User_controller
      dockerfile: Dockerfile
    ports:
      - "5000:5000"

  users:
    build:     
      context: ../Services/User_Database
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    volumes:
      - datiusers:/Services/User_Database/users
  db:
    build:
      context: .
      dockerfile: Dockerfile.mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : <MySQL Port running inside container>
      - '3306:3306'
    volumes:
      - my-db:/var/lib/mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  #inserito prometheus
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus/prometheus.yaml #TO_DO sistemiamo il path
      - ./prometheus:/etc/prometheus/rules.yml # prima invece di prometheus era rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml' #TO_DO sistemiamo il path

  #inserito node-exporter
  node-exporter:
    image: prom/node-exporter
    ports:
      - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
  #inserisco alert manager
  alert-manager:
    image: prom/alertmanager
    volumes:
      - "./alertmanager:/etc/alertmanager/alertmanager"
    ports:
      - 9093:9093

  #inserisco SLAmanager
  sla-manager:
    build:     
      context: ../Services/SLAmanager
      dockerfile: Dockerfile
    ports:
      - "5014:5014"
    #volumes:
      #- datiusers:/Services/SLAmanager/metriche

volumes:
  daticontrollertratte:
  datirules:
  datiusers:
  #metriche:
