apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:latest
        # imagePullPolicy: Never
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD #TO_DO An environment variable named “MYSQL_ROOT_PASSWORD.”
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password #TO_DO dove salviamo la nostra password nel secret
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        # - name: mysql-persistent-storage
        #   mountPath: /var/lib/mysql

      volumes:
      - name: mysql-initdb
        configMap:
          name: mysql-initdb-config
      - name: mysql-persistent-storage
        # persistentVolumeClaim:
        #   claimName: mysql-pv-claim

      

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS controllertratte;

    USE controllertratte;

    CREATE TABLE IF NOT EXISTS tratte_salvate (
            id INT PRIMARY KEY AUTO_INCREMENT,
            origine VARCHAR(3) NOT NULL,
            destinazione VARCHAR(3) NOT NULL,
            adulti INT
    );
    CREATE TABLE IF NOT EXISTS aeroporti_salvati (
            id INT PRIMARY KEY AUTO_INCREMENT,
            origine VARCHAR(3) NOT NULL
    );

    CREATE DATABASE IF NOT EXISTS rules;

    USE rules;

    CREATE TABLE IF NOT EXISTS tratte (
            id INT PRIMARY KEY AUTO_INCREMENT,
            user_id INT NOT NULL,
            origine TEXT NOT NULL,
            destinazione TEXT NOT NULL,
            budget INT,
            adulti INT
    );

    CREATE TABLE IF NOT EXISTS aeroporti (
            id INT PRIMARY KEY AUTO_INCREMENT,
            user_id INT NOT NULL,
            origine TEXT NOT NULL,
            budget INT
    );

    CREATE DATABASE IF NOT EXISTS scraper;

    USE scraper;

    CREATE TABLE IF NOT EXISTS tratte_salvate (
            id INT PRIMARY KEY AUTO_INCREMENT,
            origine VARCHAR(3) NOT NULL,
            destinazione VARCHAR(3) NOT NULL,
            adulti INT
    );
    CREATE TABLE IF NOT EXISTS aeroporti_salvati (
            id INT PRIMARY KEY AUTO_INCREMENT,
            origine VARCHAR(3) NOT NULL
    );

    CREATE DATABASE IF NOT EXISTS metrics;

    USE metrics;

    CREATE TABLE IF NOT EXISTS metriche (
            id INT PRIMARY KEY AUTO_INCREMENT,
            nome VARCHAR(70) NOT NULL,
            soglia FLOAT UNSIGNED,
            desiderato FLOAT UNSIGNED
    );

    INSERT INTO metriche (nome, soglia, desiderato) 
    SELECT * FROM (SELECT 'node_network_receive_errs_total', 2, 0) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'node_network_receive_errs_total'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'node_network_transmit_errs_total', 2, 0) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'node_network_transmit_errs_total'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'node_memory_MemAvailable_bytes', 884879400, 884879360) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'node_memory_MemAvailable_bytes'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'kafka_consumergroup_members' AS nome, 2 AS soglia, 2 AS desiderato) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'kafka_consumergroup_members'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'count(kube_persistentvolume_created)'AS nome, 8 AS soglia, 8 AS desiderato) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'count(kube_persistentvolume_created)'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'count(kube_service_created)'AS nome, 21 AS soglia, 21 AS desiderato) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'count(kube_service_created)'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'prometheus_sd_kubernetes_http_request_duration_seconds_count', 5, 1) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'prometheus_sd_kubernetes_http_request_duration_seconds_count'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'container_cpu_usage_seconds_total{pod=~"rules.*"}', 7, 5) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'container_cpu_usage_seconds_total{pod=~"rules.*"}'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'scraping_time', 4, 3) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'scraping_time'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'elaborating_tratte_time', 11, 10) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'elaborating_tratte_time'
    ) LIMIT 1;

    INSERT INTO metriche (nome, soglia, desiderato)
    SELECT * FROM (SELECT 'elaborating_aeroporti_time', 11, 10) AS tmp
    WHERE NOT EXISTS (
        SELECT nome FROM metriche WHERE nome = 'elaborating_aeroporti_time'
    ) LIMIT 1;



    CREATE DATABASE IF NOT EXISTS users;

    USE users;

    CREATE TABLE IF NOT EXISTS users (
            id INT PRIMARY KEY AUTO_INCREMENT,
            nome VARCHAR(20) NOT NULL,
            cognome VARCHAR(20) NOT NULL,
            email VARCHAR(50) NOT NULL
    );

