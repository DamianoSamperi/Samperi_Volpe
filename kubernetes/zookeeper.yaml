apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: zookeeper
  template:
    metadata:
      labels:
        component: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: pharosproduction/zookeeper_k8s:v4        
        resources:
          requests:
            memory: "64Mi"
            cpu: "125m"
          limits:
            memory: "128Mi"
            cpu: "250m"
        ports:
          - containerPort: 2181
        tty: true
        livenessProbe:
          exec:
            command:
              - /opt/check.sh
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
              - /opt/check.sh
          initialDelaySeconds: 30
          periodSeconds: 5
      imagePullSecrets:
        - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-ip-service
spec:
  type: ClusterIP 
  selector:
    component: zookeeper
  ports:
  - name: zookeeper
    port: 2181
    targetPort: 2181
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: kafka
spec:
  serviceName: zookeeper
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      initContainers:
        - command:
            - /bin/sh
            - -c
            - |-
              set -ex;
              mkdir -p "$ZOO_DATA_LOG_DIR" "$ZOO_DATA_DIR" "$ZOO_CONF_DIR";
              if [[ ! -f "$ZOO_DATA_DIR/myid" ]]; then
                IDX="$(echo $HOSTNAME| rev | cut -d "-" -f1 | rev)"
                SVR_INDEX=$((IDX+1))
                echo $SVR_INDEX > "$ZOO_DATA_DIR/myid"
              fi
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          envFrom:
            - configMapRef:
                name: zookeeper-config
          image: busybox:1.28
          imagePullPolicy: IfNotPresent
          name: zookeeper-init
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: /data
              name: data
      containers:
        - image: zookeeper
          imagePullPolicy: Always
          name: zookeeper
          ports:
            - containerPort: 2181
              name: client
            - containerPort: 2888
              name: server
            - containerPort: 3888
              name: leader-election
          resources: {}
          envFrom:
            - configMapRef:
                name: zookeeper-config
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /datalog
              name: datalog
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: nfs-client
        resources:
          requests:
            storage: 100Mi
    - metadata:
        name: datalog
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: nfs-client
        resources:
          requests:
            storage: 100Mi

  