apiVersion: v1
kind: Service
metadata:
  name: kafka-service
spec:
  selector:
    app: kafka
  ports:
    - protocol: TCP
      port: 29092
      targetPort: 29092
status:
  loadBalancer: {}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kafka-deployment
  labels:
    app: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.0.1
        ports:
        - containerPort: 9092
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: 'zookeeper-service:2181'
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://:9092,PLAINTEXT_INTERNAL://kafka:29092
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"

# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: kafka
# spec:
#   serviceName: kafka
#   replicas: 1
#   selector:
#     matchLabels:
#       app: kafka
#   template:
#     metadata:
#       labels:
#         app: kafka
#     spec:
#       containers:
#       - name: kafka
#         image: confluentinc/cp-kafka #TO_DO immagine del nostro kafka
#         ports:
#         - containerPort: 29092
#         volumeMounts:
#         - name: kafka-data
#           mountPath: /data

#   volumeClaimTemplates:
#   - metadata:
#       name: kafka-data
#     spec:
#       accessModes: [ "ReadWriteOnce" ]
#       resources:
#         requests:
#           storage: 5Gi