
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   creationTimestamp: null
#   labels:
#     io.kompose.service: kafka
#   name: kafka
#   namespace: kafka
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       io.kompose.service: kafka
#   strategy: {}
#   template:
#     metadata:
#       creationTimestamp: null
#       labels:
#         io.kompose.network/prova-default: "true"
#         io.kompose.service: kafka
#     spec:
#       containers:
#         - env:
#           - name: CONFLUENT_SUPPORT_CUSTOMER_ID
#             value: "anonymous"
#           - name: KAFKA_ADVERTISED_LISTENERS
#             value: "INTERNAL://kafka:29092,LISTENER_EXTERNAL://kafka:9092"
#           - name: KAFKA_LISTENERS
#             value: "INTERNAL_PLAINTEXT://0.0.0.0:9092,EXTERNAL_PLAINTEXT://0.0.0.0:9093"
#           - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
#             value: "true"
#           - name: KAFKA_BROKER_ID
#             value: "1"
#           - name: KAFKA_DEFAULT_REPLICATION_FACTOR
#             value: "1"
#           - name: KAFKA_INTER_BROKER_LISTENER_NAME
#             value: "INTERNAL"
#           - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
#             value: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
#           - name: KAFKA_NUM_PARTITIONS
#             value: "1"
#           - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
#             value: "1"
#           - name: KAFKA_LOG_CLEANUP_POLICY
#             value: "compact"
#           - name: KAFKA_ZOOKEEPER_CONNECT
#             value: "zookeeper:2181"
#           image: confluentinc/cp-kafka:latest
#           name: kafka
#           ports:
#             - containerPort: 29092
#               hostPort: 29092
#               protocol: TCP
#             - containerPort: 9092
#           resources: {}
#       restartPolicy: Always
# status: {}

# ---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: kafka
  name: kafka
spec:
  clusterIP: None
  selector:
    service: kafka
  ports:
    - name: internal
      port: 29092
      targetPort: 29092
    - name: external
      port: 30092
      targetPort: 9092
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    service: kafka
  name: kafka
  namespace: kafka
spec:
  serviceName: kafka
  replicas: 
  selector:
    matchLabels:
      service: kafka
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: kafka
    spec:
      securityContext:
        fsGroup: 1000
      enableServiceLinks: false
      volumes:
      - name: kafka-log4j-config
        configMap:
          name: kafka-log4j-config
          items:
          - key: log4j.properties
            path: log4j.properties
      containers:
      - name: kafka
        imagePullPolicy: IfNotPresent
        image: confluentinc/cp-kafka:6.1.4
        ports:
          - containerPort: 29092
          - containerPort: 9092
        env:
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "INTERNAL://:29092,LISTENER_EXTERNAL://:9092"
          - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
            value: "true"
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: "INTERNAL"
          - name: KAFKA_LISTENERS
            value: "INTERNAL://:29092,LISTENER_EXTERNAL://:9092"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: "INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zookeeper:2181"
          - name: log4j.logger.org.apache.kafka
            value: Error 
        resources: {}
        volumeMounts:
          - mountPath: /var/lib/kafka/
            name: kafka-data
          - name: kafka-log4j-config
            mountPath: /etc/kafka/log4j
      hostname: kafka
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi